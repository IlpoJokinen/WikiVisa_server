{"version":3,"sources":["components/UI/PageTitle.js","components/views/WelcomePage/Gamertag.js","components/views/WelcomePage/JoinOrCreate.js","components/UI/GameListItem.js","components/UI/GameList.js","components/modals/FindGameModal.js","components/views/WelcomePage/JoinGame.js","components/views/WelcomePage/CreateGame.js","components/WelcomeScreen.js","components/UI/CircleTimer.js","components/UI/Player.js","components/StartScreen.js","components/UI/Question.js","components/UI/Choice.js","components/UI/Choices.js","components/QuestionScreen.js","components/UI/RoundStatsTable.js","components/RoundEndScreen.js","components/UI/StatsTable.js","components/GameEndScreen.js","components/UI/PageHeader.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","title","className","GamertagScreen","setScreen","setGamertag","gamertag","document","Row","Col","Form","Control","size","onChange","e","target","value","placeholder","Button","block","disabled","length","variant","onClick","JoinOrCreateScreen","GameListItem","game","joinGame","ListGroup","Item","sm","Badge","pill","currentPlayers","maxPlayers","roomCode","categories","GameList","getPublicGames","publicGames","useEffect","map","i","key","FindGameModal","setModalVisibility","visibility","Modal","show","centered","Header","Title","Body","Footer","JoinGameScreen","setRoomCode","joiningState","useState","modalVisibility","Group","Label","xs","span","order","type","md","lg","ButtonGroup","style","width","CreateGameScreen","creatingState","createGame","question","count","counters","answer","roundEnd","losePoints","gameProperties","setGameProperties","Text","controlId","event","options","selected","push","prevState","addToSelectedCategories","as","multiple","Check","id","label","checked","WelcomeScreen","screen","Container","JoinOrCreate","JoinGame","CreateGame","getScreen","CircleTimer","startGameCounter","Player","thisPlayersTag","StartScreen","players","timer","startGame","started","isCreator","allPlayers","player","isPlaying","durationSeconds","parseInt","colors","renderTime","Question","Choice","setAnswer","choice","name","htmlFor","Choices","choices","QuestionScreen","setReady","playersReady","setPlayersReady","setDisabled","toString","num","filter","p","ready","ProgressBar","animated","now","max","min","RoundStatsTable","answers","correctAnswer","rows","Object","keys","Table","striped","bordered","hover","RoundEndScreen","answerTitle","StatsTable","sort","a","b","points","color","GameEndScreen","winner","reduce","prev","current","href","PageHeader","socket","io","App","pageTitle","setGame","setPublicGames","setCorrectAnswer","setJoiningState","setCreatingState","centerizeWrapper","wrapper","getElementById","root","wrapperWidth","offsetWidth","wrapperHeight","offsetHeight","viewportWidth","Math","documentElement","clientWidth","window","innerWidth","viewportHeight","clientHeight","innerHeight","classList","remove","add","emit","getPlayersAnswers","forEach","answeredThisRound","question_id","setAnswerAndPlayerReady","game_id","onresize","onload","on","timerName","view","data","questionCounter","roundEndCounter","alert","error","games","fluid","creator","getPage","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"gRAMeA,EAJG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OAAO,wBAAIC,UAAU,eAAgBD,IC+B1BE,EA9BQ,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAE9C,OADAC,SAASN,MAAQ,WACV,kBAACO,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,oBAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,KAAKV,UAAU,cAAcW,SAAU,SAAAC,GAAC,OAAIT,EAAYS,EAAEC,OAAOC,QAAQC,YAAY,uBAGhH,kBAACT,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQC,OAAK,EAACC,UAAWd,EAASe,OAAQC,QAAQ,UAAUC,QAAS,kBAAMnB,EAAU,kBAArF,UAGR,kBAACI,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQC,OAAK,EAACG,QAAQ,OAAOC,QAAS,kBAAMnB,EAAU,kBAAtD,wB,OCMToB,EA3BY,SAAC,GAAmB,IAAjBpB,EAAgB,EAAhBA,UAE1B,OADAG,SAASN,MAAQ,cACV,kBAACO,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,4BAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQN,KAAK,KAAKO,OAAK,EAACG,QAAQ,UAAUC,QAAS,kBAAMnB,EAAU,cAC/D,kBAAC,IAAD,CAAMQ,KAAM,KADhB,gBAKR,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQN,KAAK,KAAKO,OAAK,EAACG,QAAQ,UAAUC,QAAS,kBAAMnB,EAAU,gBAC/D,kBAAC,IAAD,CAAOQ,KAAM,KADjB,qB,kBCFLa,EAlBM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAE1B,OAAO,kBAACC,EAAA,EAAUC,KAAX,KACH,kBAACrB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKqB,GAAG,QACJ,kBAACC,EAAA,EAAD,CAAOC,MAAI,EAACV,QAAQ,WACdI,EAAKO,eADX,IAC8BP,EAAKQ,aAGvC,kBAACzB,EAAA,EAAD,KAAOiB,EAAKS,UACZ,kBAAC1B,EAAA,EAAD,KAAOiB,EAAKU,WAAW,IACvB,kBAAC3B,EAAA,EAAD,CAAKqB,GAAG,QACJ,kBAACZ,EAAA,EAAD,CAAQN,KAAK,KAAKU,QAAQ,UAAUC,QAAS,kBAAMI,EAASD,EAAKS,YAAjE,YCODE,EAlBE,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,YAAaZ,EAAc,EAAdA,SAK5C,OAJAa,qBAAU,WACNF,MACD,IAEI,kBAACV,EAAA,EAAD,KAECW,EAAYE,KAAI,SAACf,EAAMgB,GAAP,OACZ,kBAAC,EAAD,CACIC,IAAKD,EACLhB,KAAMA,EACNC,SAAUA,S,SCafiB,EAvBO,SAAC,GAA6E,IAA5EC,EAA2E,EAA3EA,mBAAoBC,EAAuD,EAAvDA,WAAYR,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,YAAaZ,EAAc,EAAdA,SACjF,OAAO,kBAACoB,EAAA,EAAD,CAAO7C,UAAU,gBAAgB8C,KAAMF,EAAYlC,KAAK,KAAKqC,UAAQ,GACxE,kBAACF,EAAA,EAAMG,OAAP,KACI,kBAACH,EAAA,EAAMI,MAAP,kBAGA,kBAACjC,EAAA,EAAD,CAAQN,KAAK,KAAKV,UAAU,0BAA0BqB,QAAS,kBAAMe,KAAkBhB,QAAQ,SAC3F,kBAAC,IAAD,CAAgBV,KAAK,OADzB,kBAIJ,kBAACmC,EAAA,EAAMK,KAAP,KACI,kBAAC,EAAD,CACId,eAAgBA,EAChBC,YAAaA,EACbZ,SAAUA,KAGlB,kBAACoB,EAAA,EAAMM,OAAP,KACI,kBAACnC,EAAA,EAAD,CAAQK,QAAS,kBAAMsB,GAAmB,KAA1C,Y,SC6BGS,EA9CQ,SAAC,GAA+F,IAA7FlD,EAA4F,EAA5FA,UAAWmD,EAAiF,EAAjFA,YAAapB,EAAoE,EAApEA,SAAUqB,EAA0D,EAA1DA,aAAc7B,EAA4C,EAA5CA,SAAUW,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAAkB,EACpEkB,oBAAS,GAD2D,mBAC3GC,EAD2G,KAC1Fb,EAD0F,KAGlH,OAAO,kBAACrC,EAAA,EAAD,KACH,kBAAC,EAAD,CACIqC,mBAAoBA,EACpBC,WAAYY,EACZpB,eAAgBA,EAChBC,YAAaA,EACbZ,SAAUA,IAEd,kBAAClB,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,mCAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,wBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcS,SAAUoC,EAAc5C,KAAK,KAAKK,YAAY,oBAAoBJ,SAAU,SAAAC,GAAC,OAAIyC,EAAYzC,EAAEC,OAAOC,aAIhI,kBAACR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKoD,GAAI,CAAEC,KAAM,GAAIC,MAAO,GAAKjC,GAAI,CAAEgC,KAAM,OAAQC,MAAO,IACxD,kBAAC7C,EAAA,EAAD,CAAQK,QAAS,kBAAMnB,EAAU,iBAAiB4D,KAAK,UACnD,kBAAC,IAAD,CAAWpD,KAAM,KADrB,YAIJ,kBAACH,EAAA,EAAD,CAAKoD,GAAI,CAAEC,KAAM,GAAIC,MAAO,GAAKjC,GAAI,CAAEiC,MAAO,GAAKE,IAAE,EAACC,IAAE,GACpD,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAACC,MAAO,SACxB,kBAACnD,EAAA,EAAD,CAAQI,QAAQ,YAAYC,QAAS,kBAAMsB,GAAmB,IAAOmB,KAAK,UACtE,kBAAC,IAAD,CAAQpD,KAAM,KADlB,cAGA,kBAACM,EAAA,EAAD,CAAQE,UAAWe,EAASd,OAAQE,QAAS,kBAAMI,KAAYqC,KAAK,UAChE,kBAAC,IAAD,CAAUpD,KAAM,KADpB,oBCqFT0D,EAzHU,SAAC,GAAyD,IAAxDlE,EAAuD,EAAvDA,UAAWmD,EAA4C,EAA5CA,YAAagB,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAAgB,EAClCf,mBAAS,CACjDgB,SAAU,CACNrC,WAAY,GACZsC,MAAO,IAEXC,SAAU,CACNC,OAAQ,GACRC,SAAU,IAEd/B,YAAY,EACZgC,YAAY,IAX8D,mBACvEC,EADuE,KACvDC,EADuD,KAyB9E,OAAO,kBAACxE,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAD,CAAKN,UAAU,eACX,kBAACO,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,+BAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,wBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcS,SAAUmD,EAAe3D,KAAK,KAAKK,YAAY,kBAAkBJ,SAAU,SAAAC,GAAC,OAAIyC,EAAYzC,EAAEC,OAAOC,UACnH,kBAACN,EAAA,EAAKuE,KAAN,CAAW/E,UAAU,cAArB,kFAMZ,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKoD,GAAG,KAAKI,GAAG,KACZ,kBAACvD,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,4BACA,kBAAClD,EAAA,EAAKiD,MAAN,CAAYuB,UAAU,gCAAgCrE,SAAU,SAAAC,GAAC,OAlCzD,SAAAqE,GAG5B,IAFA,IAAIC,EAAUD,EAAMpE,OAAOqE,QACvBC,EAAW,GACP3C,EAAI,EAAGA,EAAI0C,EAAQ/D,OAAQqB,IAC5B0C,EAAQ1C,GAAG2C,UACVA,EAASC,KAAKF,EAAQ1C,GAAG1B,OAGjCgE,GAAkB,SAAAO,GAAS,sBAASA,EAAT,CAAoBd,SAAS,eAAKc,EAAUd,SAAhB,CAA0BrC,WAAYiD,SA0BJG,CAAwB1E,KACzF,kBAACJ,EAAA,EAAKC,QAAN,CAAcS,SAAUmD,EAAekB,GAAG,SAASC,UAAQ,GACvD,4BAAQ1E,MAAM,WAAd,WACA,4BAAQA,MAAM,oBAAd,sBAGR,kBAACN,EAAA,EAAKuE,KAAN,CAAW/E,UAAU,cAArB,mGAIJ,kBAACQ,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,uBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcS,SAAUmD,EAAe3D,KAAK,KAAKK,YAAY,uBAAuBJ,SAAU,SAAAC,GAAC,OAAIkE,EAAkB,eAAID,EAAL,CAAqBN,SAAS,eAAKM,EAAeN,SAArB,CAA+BC,MAAO5D,EAAEC,OAAOC,cAChM,kBAACN,EAAA,EAAKuE,KAAN,CAAW/E,UAAU,cAArB,4CAKR,kBAACO,EAAA,EAAD,CAAKoD,GAAG,KAAKI,GAAG,KACZ,kBAACvD,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,oBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcS,SAAUmD,EAAe3D,KAAK,KAAKK,YAAY,sBAAsBJ,SAAU,SAAAC,GAAC,OAAIkE,EAAkB,eAAID,EAAL,CAAqBJ,SAAS,eAAKI,EAAeJ,SAArB,CAA+BC,OAAQ9D,EAAEC,OAAOC,cAChM,kBAACN,EAAA,EAAKuE,KAAN,CAAW/E,UAAU,cAArB,iDAIJ,kBAACQ,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,wBACA,kBAAClD,EAAA,EAAKC,QAAN,CAAcS,SAAUmD,EAAe3D,KAAK,KAAKK,YAAY,sBAAsBJ,SAAU,SAAAC,GAAC,OAAIkE,EAAkB,eAAID,EAAL,CAAqBJ,SAAS,eAAKI,EAAeJ,SAArB,CAA+BE,SAAU/D,EAAEC,OAAOC,cAClM,kBAACN,EAAA,EAAKuE,KAAN,CAAW/E,UAAU,cAArB,iFAIJ,kBAACQ,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,wCACA,kBAAClD,EAAA,EAAKiF,MAAN,CACI3B,KAAK,SACL4B,GAAG,oBACHC,MAAO,gBAAkBd,EAAeD,WAAa,GAAK,OAAS,eACnEgB,QAASf,EAAeD,WACxBjE,SAAU,SAAAC,GAAC,OAAIkE,EAAkB,eAAID,EAAL,CAAqBD,YAAaC,EAAeD,kBAGzF,kBAACpE,EAAA,EAAKiD,MAAN,KACI,kBAACjD,EAAA,EAAKkD,MAAN,mBACA,kBAAClD,EAAA,EAAKiF,MAAN,CACI3B,KAAK,SACL4B,GAAG,oBACHC,MAAO,iBAAmBd,EAAejC,WAAa,SAAW,WACjEgD,QAASf,EAAejC,WACxBjC,SAAU,SAAAC,GAAC,OAAIkE,EAAkB,eAAID,EAAL,CAAqBjC,YAAaiC,EAAejC,oBAKjG,kBAACtC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKoD,GAAG,QACJ,kBAAC3C,EAAA,EAAD,CAAQK,QAAS,kBAAMnB,EAAU,iBAAiB4D,KAAK,UACnD,kBAAC,IAAD,CAAWpD,KAAM,KADrB,YAIJ,kBAACH,EAAA,EAAD,CAAKP,UAAU,cACX,kBAACgB,EAAA,EAAD,CAAQI,QAASiD,EAAgB,YAAc,UAAWhD,QAAS,kBAAMiD,EAAWO,IAAiBf,KAAK,UACpGO,EAAgB,kBAAC,IAAD,CAAgB3D,KAAM,GAAIV,UAAU,SAAY,kBAAC,IAAD,CAAOU,KAAM,KAC7E2D,EAAgB,oBAAsB,wBCvErDwB,EAxCO,SAAC,GAAsI,IAApI1F,EAAmI,EAAnIA,YAAaC,EAAsH,EAAtHA,SAAUiD,EAA4G,EAA5GA,YAAapB,EAA+F,EAA/FA,SAAUqB,EAAqF,EAArFA,aAAc7B,EAAuE,EAAvEA,SAAU6C,EAA6D,EAA7DA,WAAYD,EAAiD,EAAjDA,cAAejC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAAkB,EAC5HkB,mBAAS,IADmH,mBACjJuC,EADiJ,KACzI5F,EADyI,KA+BxJ,OAAO,kBAAC6F,EAAA,EAAD,KACH,kBAACzF,EAAA,EAAD,CAAKN,UAAU,6BACX,kBAACO,EAAA,EAAD,CAAKyD,GAAG,KA9BE,WACd,OAAO8B,GACH,IAAK,eAAgB,OAAO,kBAACE,EAAD,CACxB9F,UAAWA,IAEf,IAAK,WAAY,OAAO,kBAAC+F,EAAD,CACpB/F,UAAWA,EACXmD,YAAaA,EACbpB,SAAUA,EACVqB,aAAcA,EACd7B,SAAUA,EACVW,eAAgBA,EAChBC,YAAaA,IAEjB,IAAK,aAAc,OAAO,kBAAC6D,EAAD,CACtBhG,UAAWA,EACXmD,YAAaA,EACbgB,cAAeA,EACfC,WAAYA,IAEhB,QAAS,OAAO,kBAAC,EAAD,CACZpE,UAAWA,EACXC,YAAaA,EACbC,SAAUA,KAQR+F,OCxBHC,G,MAdK,SAACC,GACjB,OAAyB,IAArBA,EACK,yBAAKrG,UAAU,SAAf,eAIP,yBAAKA,UAAU,SACb,yBAAKA,UAAU,QAAf,aACA,yBAAKA,UAAU,SAASqG,GACxB,yBAAKrG,UAAU,QAAf,c,QCIOsG,EAZA,SAAC,GAAkC,IAAhClG,EAA+B,EAA/BA,SAAUmG,EAAqB,EAArBA,eACxB,OAAO,kBAACjG,EAAA,EAAD,KACH,kBAACC,EAAA,EAAD,KACI,yBAAKP,UAAU,YAEPuG,EAAiB,2BAAInG,GAAgBA,MCwD1CoG,EA1DK,SAAC,GAA2E,IAAzEpG,EAAwE,EAAxEA,SAAUqG,EAA8D,EAA9DA,QAASC,EAAqD,EAArDA,MAAOzE,EAA8C,EAA9CA,SAAU0E,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACvEC,EAAa,GAOjB,OANAzG,SAASN,MAAQ6G,EAAU,oBAAsB,aAC9CH,EAAQtF,SACP2F,EAAaL,EAAQlE,KAAI,SAAAwE,GACrB,OAAO,kBAAC,EAAD,CAAQtE,IAAKsE,EAAOrB,GAAItF,SAAU2G,EAAO3G,SAAUmG,eAAgBnG,IAAa2G,EAAO3G,eAG/F,kBAAC2F,EAAA,EAAD,KACH,kBAACzF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAK,eAAUkC,OAGhC4E,IAAcD,EACV,kBAACtG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQI,QAAQ,UAAUC,QAAS,WAAQsF,MAA3C,gBAKN,KAEN,kBAACrG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,0DAGR,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACMuG,KAIbF,EACC,kBAACrG,EAAA,EAAD,KACE,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,uBAAD,CACIyG,WAAS,EACTC,gBAAiBC,SAASR,GAC1BS,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,YAChDC,WAAYhB,OAK1B,Q,SCnDCiB,EAJE,SAAC,GAAkB,IAAhB9C,EAAe,EAAfA,SAChB,OAAO,wBAAIvE,UAAU,eAAgBuE,ICgB1B+C,EAfA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,OAAQ1G,EAAY,EAAZA,MAC3B4E,EAAE,iBAAa5E,GAErB,OAAO,kBAACP,EAAA,EAAD,CAAKP,UAAU,eAClB,2BACIW,SAAU,kBAAM4G,EAAU,CAACzG,MAAOA,EAAO2G,KAAMD,KAC/C9B,GAAIA,EACJ5B,KAAK,QACL2D,KAAK,UACL3G,MAAOA,IAEX,2BAAO4G,QAAShC,GAAM8B,KCAfG,EAVC,SAAC,GAAqC,IAApCJ,EAAmC,EAAnCA,UAAWK,EAAwB,EAAxBA,QAAS1G,EAAe,EAAfA,SAClC,OAAO,kBAACZ,EAAA,EAAD,CAAKN,UAAWkB,EAAW,cAAgB,IAE1C0G,EAAQrF,KAAI,SAACiF,EAAQhF,GAAT,OACR,kBAAC,EAAD,CAAQtB,SAAUA,EAAUqG,UAAWA,EAAWC,OAAQA,EAAQ/E,IAAKD,EAAG1B,MAAO0B,SCsDlFqF,EAxDQ,SAAC,GAAuD,IAArDN,EAAoD,EAApDA,UAAWb,EAAyC,EAAzCA,MAAOnC,EAAkC,EAAlCA,SAAUkC,EAAwB,EAAxBA,QAASqB,EAAe,EAAfA,SAAe,EAClCvE,mBAAS,GADyB,mBACnEwE,EADmE,KACrDC,EADqD,OAE1CzE,oBAAS,GAFiC,mBAEnErC,EAFmE,KAEzD+G,EAFyD,KAa1E,OAVA5H,SAASN,MAAQwE,EAASxE,MAAMmI,WAMhC5F,qBAAU,WACN,IAAI6F,EAAM1B,EAAQ2B,QAAO,SAAAC,GAAC,OAAgB,IAAZA,EAAEC,SAAgBnH,OAChD6G,EAAgBG,KACjB,CAAC1B,IACG,kBAACV,EAAA,EAAD,KACH,kBAACzF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,uBAAD,CACIyG,WAAS,EACTC,gBAAiBC,SAASR,GAC1BS,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,YAChDC,WAAYhB,MAIxB,kBAAC9F,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAUgE,SAAUA,EAASxE,UAGrC,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAASW,SAAUA,EAAUqG,UAAWA,EAAWK,QAASrD,EAASqD,YAG7E,kBAACtH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACS,EAAA,EAAD,CAAQI,QAAQ,UAAUV,KAAK,KAAKW,QAAS,kBA9BrDyG,SACAG,GAAY,IA6B6DhH,OAAK,GAAtE,WAGR,kBAACX,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIP,UAAU,eAAd,UAAgC+H,EAAhC,cAAkDtB,EAAQtF,OAA1D,qBAGR,kBAACb,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACgI,EAAA,EAAD,CAAaC,UAAQ,EAACC,IAAKvB,SAASa,GAAeW,IAAKxB,SAAST,EAAQtF,QAASwH,IAAK,U,SCxBhGC,G,MA1BS,SAAC,GAA0C,IAAxCxI,EAAuC,EAAvCA,SAAUyI,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cACtCC,EAAO,GAWX,OAVGF,IACCE,EAAOC,OAAOC,KAAKJ,GAAStG,KAAI,SAAC8F,EAAG7F,GAChC,OAAO,wBAAIC,IAAKD,EAAGxC,UAAW6I,EAAQR,GAAGvH,QAAUgI,EAAchI,MAAQ,UAAY,SACjF,4BAAK0B,EAAI,GACT,4BAAKpC,IAAaiI,EAAI,2BAAIA,GAASA,GACnC,4BAAKQ,EAAQR,GAAGZ,WAKrB,kBAACyB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC3I,KAAK,MACtC,+BACI,4BACI,iCACA,wCACA,0CAGR,+BACKqI,MCsBEO,EAzCQ,SAAC,GAAiD,IAA/CR,EAA8C,EAA9CA,cAAe1I,EAA+B,EAA/BA,SAAUyI,EAAqB,EAArBA,QAASnC,EAAY,EAAZA,MAExD,OADArG,SAASN,MAAQ,kBACV,kBAACgG,EAAA,EAAD,KACH,kBAACzF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,uBAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKP,UAAU,eACV8I,EAAchI,QAAU+H,EAAQzI,GAAUU,MACzC,8CAAmB,0BAAMd,UAAU,SAAhB,YACnB,0CAAe,0BAAMA,UAAU,QAAQ6I,EAAQzI,GAAUqH,MAAzD,QAA0E,0BAAMzH,UAAU,OAAhB,gBAIpF,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIP,UAAU,eAAe8I,EAAcS,YAA3C,IAAwD,kBAAC1H,EAAA,EAAD,CAAOT,QAAQ,WAAW0H,EAAcrB,SAGxG,kBAACnH,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAiBuI,cAAeA,EAAe1I,SAAUA,EAAUyI,QAASA,MAGpF,kBAACvI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAACD,EAAA,EAAD,KACI,kBAAC,uBAAD,CACI0G,WAAS,EACTC,gBAAiBC,SAASR,GAC1BS,OAAQ,CAAC,CAAC,UAAW,KAAO,CAAC,UAAW,KAAO,CAAC,YAChDC,WAAYhB,SCLjBoD,EA7BI,SAAC,GAA2B,IAAzB/C,EAAwB,EAAxBA,QAASrG,EAAe,EAAfA,SAEvB2I,EAAO,GAaX,OAZGtC,IACCsC,EAAQtC,EACPgD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,OAASF,EAAEE,UAC5BrH,KAAI,SAACwE,EAAQvE,GAAT,OAAe,wBAAIC,IAAKD,GACzB,4BAAMA,EAAI,GACV,4BAAMpC,IAAa2G,EAAO3G,SAAW,2BAAI2G,EAAO3G,UAAgB2G,EAAO3G,UACvE,4BAAM2G,EAAO6C,OAAb,IAA6B,IAANpH,EAAU,kBAAC,IAAD,CAAQqH,MAAM,UAAUnJ,KAAM,KAAQ,iBAMxE,kBAACwI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC3I,KAAK,MACtC,+BACI,4BACI,iCACA,oCACA,wCAGR,+BACKqI,KCCEe,EAzBO,SAAC,GAA2B,IAAzB1J,EAAwB,EAAxBA,SAAUqG,EAAc,EAAdA,QAC3BsD,EAAStD,EAAQuD,QAAO,SAACC,EAAMC,GAAP,OAAoBD,EAAKL,OAASM,EAAQN,OAAUK,EAAOC,KAEvF,OADA7J,SAASN,MAAQK,IAAa2J,EAAO3J,SAAW,mBAAqB,yBAC9D,kBAAC2F,EAAA,EAAD,KACH,kBAACzF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAWR,MAAM,gBAGzB,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAYH,SAAUA,EAAUqG,QAASA,MAGjD,kBAACnG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKP,UAAU,eACX,kBAACiE,EAAA,EAAD,CAAajE,UAAU,UAAUU,KAAK,MAClC,kBAACM,EAAA,EAAD,CAAQmJ,KAAK,IAAI/I,QAAQ,gBAAzB,uBACA,kBAACJ,EAAA,EAAD,CAAQI,QAAQ,WAAhB,mBChBLgJ,EANI,SAAC,GAAe,IAAbrK,EAAY,EAAZA,MAClB,OAAO,4BAAQC,UAAU,eACpB,+BAASD,K,iBCSZsK,G,OAASC,IAAG,mCAkLHC,MA/Kf,WAAgB,IAAD,EACuBhH,mBAAS,IADhC,mBACJiH,EADI,aAEajH,mBAAS,KAFtB,mBAEJ/B,EAFI,KAEEiJ,EAFF,OAG2BlH,mBAAS,IAHpC,mBAGJlB,EAHI,KAGSqI,EAHT,OAIqBnH,mBAAS,IAJ9B,mBAIJnD,EAJI,KAIMD,EAJN,OAKqBoD,mBAAS,IAL9B,mBAKJtB,EALI,KAKMoB,EALN,OAMiBE,mBAAS,IAN1B,mBAMJmB,EANI,KAMI6C,EANJ,OAO+BhE,mBAAS,IAPxC,mBAOJuF,EAPI,KAOW6B,EAPX,OAQ6BpH,oBAAS,GARtC,mBAQJD,EARI,KAQUsH,EARV,OAS+BrH,oBAAS,GATxC,mBASJc,EATI,KASWwG,EATX,KA4DX,SAASC,IACL,IAAIC,EAAU1K,SAAS2K,eAAe,WAClCC,EAAO5K,SAAS2K,eAAe,QAC/BE,EAAeH,EAAQI,YACvBC,EAAgBL,EAAQM,aACxBC,EAAgBC,KAAK7C,IAAIrI,SAASmL,gBAAgBC,YAAaC,OAAOC,YAAc,GACpFC,EAAiBL,KAAK7C,IAAIrI,SAASmL,gBAAgBK,aAAcH,OAAOI,aAAe,GAGxFZ,EAAeI,GAAiBF,EAAgBQ,EAC/CX,EAAKc,UAAUC,OAHC,qBAKhBf,EAAKc,UAAUE,IALC,qBASxB,SAAS7J,IACLiI,EAAO6B,KAAK,oBAahB,SAASC,IACL,IAAItD,EAAU,GAad,OAZArH,EAAKiF,QAAQ2F,SAAQ,SAAA/D,GACjB,IAAIgE,GAAoB,EACxBhE,EAAEQ,QAAQuD,SAAQ,SAAA1C,GACXA,EAAE4C,cAAgB9K,EAAK+C,SAASmB,KAC/BmD,EAAQR,EAAEjI,UAAYsJ,EAAEhF,OACxB2H,GAAoB,MAGxBA,IACAxD,EAAQR,EAAEjI,UAAY,CAACqH,KAAM,gCAG9BoB,EAGX,SAASpH,EAASQ,GACd2I,GAAgB,GAChBP,EAAO6B,KAAK,YAAa,CAAE9L,WAAU6B,aAGzC,SAASqC,EAAWO,GAChBgG,GAAiB,GACjBR,EAAO6B,KAAK,cAAe,CAAE9L,WAAU6B,WAAU4C,mBAGrD,SAAS0H,IACLlC,EAAO6B,KAAK,YAAa,CAAEM,QAAShL,EAAKkE,GAAItF,WAAUsE,SAAQ4H,YAAa9K,EAAK+C,SAASmB,KAG9F,SAASiB,KACL0D,EAAO6B,KAAK,aAAc,CAAEM,QAAShL,EAAKkE,KA+C9C,OA9JAgG,OAAOe,SAAW,kBAAM3B,KACxBY,OAAOgB,OAAS,kBAAM5B,KAEtBxI,qBAAU,WACN+H,EAAOsC,GAAG,gBAAgB,SAAAlG,GACtBgE,GAAQ,SAAApF,GAAS,sBAASA,EAAT,CAAoBoB,QAASA,UAElD4D,EAAOsC,GAAG,aAAa,SAAAnL,GACnBiJ,EAAQjJ,MAEZ6I,EAAOsC,GAAG,cAAc,SAAAjG,GACpB,IAAIkG,EAAY5D,OAAOC,KAAKvC,GAAO,GACnC+D,GAAQ,SAAApF,GAAS,sBAASA,EAAT,eAAqBuH,EAAYlG,EAAMkG,WAE5DvC,EAAOsC,GAAG,oBAAoB,SAAAE,GAC1BpC,GAAQ,SAAApF,GAAS,sBAASA,EAAT,CAAoBwH,KAAMA,UAE/CxC,EAAOsC,GAAG,iBAAiB,SAAAG,GACvB3M,EAAY2M,MAEhBzC,EAAOsC,GAAG,gBAAgB,SAAAG,GACtBrC,GAAQ,SAAApF,GAAS,sBAASA,EAAT,CAAoB0H,gBAAiBD,EAAKC,gBAAiBC,gBAAiBF,EAAKE,wBAEtG3C,EAAOsC,GAAG,sBAAsB,SAAAG,GAC5BnC,EAAiBmC,MAErBzC,EAAOsC,GAAG,kBAAkB,SAAAG,GACxB3M,EAAY2M,GACZlC,GAAgB,GAChBc,OAAOuB,MAAP,oBAA0BH,EAA1B,2BAEJzC,EAAOsC,GAAG,uBAAuB,SAAAO,GAC7BtC,GAAgB,GAChBc,OAAOuB,MAAMC,MAEjB7C,EAAOsC,GAAG,iBAAiB,SAAApI,GACvBkG,GAAQ,SAAApF,GAAS,sBAASA,EAAT,CAAoBd,SAAUA,UAEnD8F,EAAOsC,GAAG,gBAAgB,WACtBlC,GAAQ,SAAApF,GAAS,sBAASA,EAAT,CAAoBuB,SAAS,UAElDyD,EAAOsC,GAAG,qBAAqB,SAAAQ,GAI3BzC,EAAeyC,QAEpB,IA+GI,kBAACpH,EAAA,EAAD,CAAWL,GAAG,UAAU0H,OAAK,GAChC,kBAAC,EAAD,CAAYrN,MAAOyK,IA7CvB,WACI,OAAOhJ,EAAKqL,MACR,KAAK,EAAG,OAAO,kBAAC,EAAD,CACXpG,QAASjF,EAAKiF,QACdrG,SAAUA,EACVsG,MAAOlF,EAAK6E,iBACZpE,SAAUT,EAAKS,SACf0E,UAAWA,GACXC,QAASpF,EAAKoF,QACdC,UAAWrF,EAAK6L,UAEpB,KAAK,EAAG,OAAO,kBAAC,EAAD,CACX5G,QAASjF,EAAKiF,QACdrG,SAAUA,EACVsG,MAAOlF,EAAKuL,gBACZxI,SAAU/C,EAAK+C,SACfgD,UAAWA,EACXO,SAAUyE,IAEd,KAAK,EAAG,OAAO,kBAAC,EAAD,CACX1D,QAASsD,IACT/L,SAAUA,EACVsG,MAAOlF,EAAKwL,gBACZlE,cAAeA,IAEnB,KAAK,EAAG,OAAO,kBAAC,EAAD,CACXrC,QAASjF,EAAKiF,QACdrG,SAAUA,IAEd,QAAS,OAAO,kBAAC,EAAD,CACZiD,YAAaA,EACblD,YAAaA,EACbC,SAAUA,EACV6B,SAAUA,EACVqB,aAAcA,EACd7B,SAAUA,EACV6C,WAAYA,EACZD,cAAeA,EACfjC,eAAgBA,EAChBC,YAAaA,KAOnBiL,KC/KUC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvN,SAAS2K,eAAe,SD6H3C,kBAAmB6C,WACrBA,UAAUC,cAAcxF,MAAMyF,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.03998881.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PageTitle = ({ title }) => {\r\n    return <h1 className=\"text-center\">{ title }</h1>\r\n}\r\n\r\nexport default PageTitle","import React from 'react'\r\nimport { Row, Col, Button, Form } from 'react-bootstrap'\r\nimport PageTitle from '../../UI/PageTitle'\r\n\r\nconst GamertagScreen = ({ setScreen, setGamertag, gamertag }) => {\r\n    document.title = 'Welcome!'\r\n    return <Row>\r\n        <Col>\r\n            <Form>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <PageTitle title=\"Give Gamertag\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Control size=\"lg\" className=\"text-center\" onChange={e => setGamertag(e.target.value)} placeholder=\"Provide gamertag\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <Button block disabled={!gamertag.length} variant=\"success\" onClick={() => setScreen('JoinOrCreate')}>Next</Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <Button block variant=\"link\" onClick={() => setScreen('JoinOrCreate')}>Randomize name</Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default GamertagScreen","import React from 'react'\r\nimport { Col, Row, Button } from 'react-bootstrap'\r\nimport PageTitle from '../../UI/PageTitle'\r\nimport { Play, Tools } from 'react-bootstrap-icons'\r\n\r\nconst JoinOrCreateScreen = ({ setScreen }) => {\r\n    document.title = 'Format Game'\r\n    return <Row>\r\n        <Col>\r\n            <Row className=\"text-center\">\r\n                <Col>\r\n                    <PageTitle title=\"Join or Create a game\" />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Button size=\"lg\" block variant=\"primary\" onClick={() => setScreen('JoinGame')}>\r\n                        <Play size={20} /> Join Game\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Button size=\"lg\" block variant=\"success\" onClick={() => setScreen('CreateGame')}>\r\n                        <Tools size={20} /> Create Game\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default JoinOrCreateScreen","import React from 'react'\r\nimport { Row, Col, Button, ListGroup, Badge } from 'react-bootstrap'\r\n\r\nconst GameListItem = ({ game, joinGame }) => {\r\n   \r\n    return <ListGroup.Item>\r\n        <Row>\r\n            <Col sm=\"auto\">\r\n                <Badge pill variant=\"primary\">\r\n                    { game.currentPlayers }/{ game.maxPlayers }\r\n                </Badge>\r\n            </Col>\r\n            <Col>{ game.roomCode }</Col>\r\n            <Col>{ game.categories[0] }</Col>\r\n            <Col sm=\"auto\">\r\n                <Button size=\"sm\" variant=\"success\" onClick={() => joinGame(game.roomCode)}>Join</Button>\r\n            </Col>\r\n        </Row>\r\n    </ListGroup.Item>\r\n}\r\n\r\nexport default GameListItem","import React, { useEffect } from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport GameListItem from './GameListItem'\r\n\r\nconst GameList = ({getPublicGames, publicGames, joinGame}) => {\r\n    useEffect(() => {\r\n        getPublicGames()\r\n    }, [])\r\n\r\n    return <ListGroup>\r\n        { \r\n            publicGames.map((game, i) => \r\n                <GameListItem \r\n                    key={i} \r\n                    game={game} \r\n                    joinGame={joinGame} \r\n                />\r\n            )\r\n        }\r\n    </ListGroup>\r\n}\r\n\r\nexport default GameList","import React from 'react'\r\nimport GameList from '../UI/GameList'\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport { ArrowClockwise } from 'react-bootstrap-icons'\r\n\r\nconst FindGameModal = ({setModalVisibility, visibility, getPublicGames, publicGames, joinGame}) => {\r\n    return <Modal className=\"findGameModal\" show={visibility} size=\"md\" centered>\r\n        <Modal.Header>\r\n            <Modal.Title>\r\n                Find Game\r\n            </Modal.Title>\r\n            <Button size=\"sm\" className=\"findGameModalRefreshBtn\" onClick={() => getPublicGames()} variant=\"light\">\r\n                <ArrowClockwise size=\"18\" /> Refresh List \r\n            </Button>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <GameList \r\n                getPublicGames={getPublicGames} \r\n                publicGames={publicGames} \r\n                joinGame={joinGame}\r\n            />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button onClick={() => setModalVisibility(false)}>Close</Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n}\r\n\r\nexport default FindGameModal","import React, {useState} from 'react'\r\nimport FindGameModal from '../../modals/FindGameModal'\r\nimport { Col, Row, Button, Form, ButtonGroup  } from 'react-bootstrap'\r\nimport PageTitle from '../../UI/PageTitle'\r\nimport { PlayFill, ArrowLeft, Search } from 'react-bootstrap-icons'\r\n\r\nconst JoinGameScreen = ({ setScreen, setRoomCode, roomCode, joiningState, joinGame, getPublicGames, publicGames }) => {\r\n    const [modalVisibility, setModalVisibility] = useState(false)\r\n    \r\n    return <Row>\r\n        <FindGameModal \r\n            setModalVisibility={setModalVisibility} \r\n            visibility={modalVisibility} \r\n            getPublicGames={getPublicGames} \r\n            publicGames={publicGames} \r\n            joinGame={joinGame}\r\n        />\r\n        <Col>\r\n            <Row className=\"text-center\">\r\n                <Col>\r\n                    <PageTitle title=\"Enter Room Code or Find Game\" />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Form.Group>\r\n                        <Form.Label>Enter room code</Form.Label>\r\n                        <Form.Control disabled={joiningState} size=\"lg\" placeholder=\"Provide room code\" onChange={e => setRoomCode(e.target.value)}/>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{ span: 12, order: 2 }} sm={{ span: \"auto\", order: 1 }}>\r\n                    <Button onClick={() => setScreen('JoinOrCreate')} type=\"button\">\r\n                        <ArrowLeft size={20} /> Return\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{ span: 12, order: 1 }} sm={{ order: 2 }} md lg>\r\n                    <ButtonGroup style={{width: \"100%\"}}>\r\n                        <Button variant=\"secondary\" onClick={() => setModalVisibility(true)} type=\"button\">\r\n                            <Search size={20} /> Find Game\r\n                        </Button>\r\n                        <Button disabled={!roomCode.length} onClick={() => joinGame()} type=\"button\">\r\n                            <PlayFill size={20} /> Join Room\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default JoinGameScreen","import React, {useState} from 'react'\r\nimport { Col, Row, Button, Form } from 'react-bootstrap'\r\nimport PageTitle from '../../UI/PageTitle'\r\nimport { ArrowLeft, ArrowClockwise, Check } from 'react-bootstrap-icons/'\r\n\r\n\r\nconst CreateGameScreen = ({setScreen, setRoomCode, creatingState, createGame}) => {\r\n    const [gameProperties, setGameProperties] = useState({\r\n        question: {\r\n            categories: [],\r\n            count: \"\"\r\n        },\r\n        counters: {\r\n            answer: \"\",\r\n            roundEnd: \"\"\r\n        },\r\n        visibility: false,\r\n        losePoints: false\r\n    })\r\n\r\n    const addToSelectedCategories = event => {\r\n        let options = event.target.options,\r\n            selected = []\r\n        for(let i = 0; i < options.length; i++) {\r\n            if(options[i].selected) {\r\n                selected.push(options[i].value)\r\n            }\r\n        }\r\n        setGameProperties(prevState => ({...prevState, question: {...prevState.question, categories: selected}}))\r\n    }\r\n\r\n    return <Row>\r\n        <Col>\r\n            <Form>\r\n                <Row className=\"text-center\">\r\n                    <Col>\r\n                        <PageTitle title=\"Setup your personal game\" />\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group>\r\n                            <Form.Label>Enter room code</Form.Label>\r\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Enter room code\" onChange={e => setRoomCode(e.target.value)}/>\r\n                            <Form.Text className=\"text-muted\">\r\n                                You can specify a room code or leave it empty to let us generate it for you\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"12\" md=\"6\">\r\n                        <Form.Group>\r\n                            <Form.Label>Question categories</Form.Label>\r\n                            <Form.Group controlId=\"createGameForm.categorySelect\" onChange={e => addToSelectedCategories(e)}>\r\n                                <Form.Control disabled={creatingState} as=\"select\" multiple>\r\n                                    <option value=\"capital\">Capital</option>\r\n                                    <option value=\"officialLanguage\">Country Language</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Text className=\"text-muted\">\r\n                                Select question categories for your game. Hold Ctrl if you want to select multiple categories!\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Question count</Form.Label>\r\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 5 questions\" onChange={e => setGameProperties({...gameProperties, question: {...gameProperties.question, count: e.target.value }})} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                How many questions do you want answer?\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col xs=\"12\" md=\"6\">\r\n                        <Form.Group>\r\n                            <Form.Label>Answer time</Form.Label>\r\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 10 seconds\" onChange={e => setGameProperties({...gameProperties, counters: {...gameProperties.counters, answer: e.target.value }})} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                This is the answering time for each question\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Round end timer</Form.Label>\r\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 10 seconds\" onChange={e => setGameProperties({...gameProperties, counters: {...gameProperties.counters, roundEnd: e.target.value }})} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                This is the timer for downtime between each question showing correct answers\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Lose Points On Incorrect Answer</Form.Label>\r\n                            <Form.Check \r\n                                type=\"switch\"\r\n                                id=\"losePoints-switch\"\r\n                                label={'Player will ' + (gameProperties.losePoints ? '' : 'not') + ' lose points'}\r\n                                checked={gameProperties.losePoints}\r\n                                onChange={e => setGameProperties({...gameProperties, losePoints: !gameProperties.losePoints})}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <Form.Label>Visibility</Form.Label>\r\n                            <Form.Check \r\n                                type=\"switch\"\r\n                                id=\"visibility-switch\"\r\n                                label={'Game will be ' + (gameProperties.visibility ? 'public' : 'private')}\r\n                                checked={gameProperties.visibility}\r\n                                onChange={e => setGameProperties({...gameProperties, visibility: !gameProperties.visibility})}\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"auto\">\r\n                        <Button onClick={() => setScreen('JoinOrCreate')} type=\"button\">\r\n                            <ArrowLeft size={20} /> Return\r\n                        </Button>\r\n                    </Col>\r\n                    <Col className=\"text-right\">\r\n                        <Button variant={creatingState ? \"secondary\" : \"success\"} onClick={() => createGame(gameProperties)} type=\"button\">\r\n                            { creatingState ? <ArrowClockwise size={20} className=\"spin\" /> : <Check size={20} /> }\r\n                            { creatingState ? \" Creating game...\" : \" Create & Join\" }\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default CreateGameScreen","import React, { useState } from 'react'\r\nimport GametagScreen from './views/WelcomePage/Gamertag'\r\nimport JoinOrCreateScreen from './views/WelcomePage/JoinOrCreate'\r\nimport JoinGameScreen from './views/WelcomePage/JoinGame'\r\nimport CreateGameScreen from './views/WelcomePage/CreateGame'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nconst WelcomeScreen = ({ setGamertag, gamertag, setRoomCode, roomCode, joiningState, joinGame, createGame, creatingState, getPublicGames, publicGames }) => {\r\n    const [screen, setScreen] = useState(\"\")\r\n\r\n    const getScreen = () => {\r\n        switch(screen){\r\n            case 'JoinOrCreate': return <JoinOrCreateScreen \r\n                setScreen={setScreen} \r\n            /> \r\n            case 'JoinGame': return <JoinGameScreen \r\n                setScreen={setScreen}\r\n                setRoomCode={setRoomCode} \r\n                roomCode={roomCode} \r\n                joiningState={joiningState} \r\n                joinGame={joinGame}\r\n                getPublicGames={getPublicGames}\r\n                publicGames={publicGames}\r\n            />\r\n            case 'CreateGame': return <CreateGameScreen \r\n                setScreen={setScreen}\r\n                setRoomCode={setRoomCode} \r\n                creatingState={creatingState} \r\n                createGame={createGame} \r\n            />\r\n            default: return <GametagScreen \r\n                setScreen={setScreen}\r\n                setGamertag={setGamertag} \r\n                gamertag={gamertag}\r\n            />\r\n        }\r\n    }\r\n\r\n    return <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col lg=\"8\">\r\n                { getScreen() }\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default WelcomeScreen","import React from 'react'\r\nimport '../../style.css'\r\n\r\nconst CircleTimer = (startGameCounter) => {\r\n    if (startGameCounter === 0) {\r\n      return <div className=\"timer\">Too late...</div>\r\n    }\r\n  \r\n    return (\r\n      <div className=\"timer\">\r\n        <div className=\"text\">Remaining</div>\r\n        <div className=\"value\">{startGameCounter}</div>\r\n        <div className=\"text\">seconds</div>\r\n      </div>\r\n    )\r\n  } \r\n\r\nexport default CircleTimer","import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport '../../style.css'\r\n\r\nconst Player = ({ gamertag, thisPlayersTag }) => {\r\n    return <Row>\r\n        <Col>\r\n            <div className=\"gamerTag\">\r\n                {\r\n                    thisPlayersTag ? <b>{gamertag}</b> : gamertag\r\n                }\r\n            </div>\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default Player","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'react-bootstrap'\r\nimport CircleTimer from './UI/CircleTimer'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport PageTitle from './UI/PageTitle'\r\nimport Player from './UI/Player'\r\n\r\nconst StartScreen = ({ gamertag, players, timer, roomCode, startGame, started, isCreator }) => {\r\n    let allPlayers = \"\" \r\n    document.title = started ? 'Game Is Starting!' : 'Game Lobby'\r\n    if(players.length) {\r\n        allPlayers = players.map(player => {\r\n            return <Player key={player.id} gamertag={player.gamertag} thisPlayersTag={gamertag === player.gamertag}/>  \r\n        })\r\n    }\r\n    return <Container>   \r\n        <Row>\r\n            <Col>\r\n                <PageTitle title={`Room ${roomCode}`}/>\r\n            </Col>\r\n        </Row>\r\n        { isCreator && !started\r\n            ? <Row>\r\n                <Col>\r\n                    <Button variant=\"success\" onClick={() => { startGame() }}>\r\n                        Start game\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            : null\r\n        }\r\n        <Row>\r\n            <Col>\r\n                <Row>\r\n                    <Col>\r\n                        <h4>Players in the game room</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        { allPlayers }\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n            {started\r\n            ? <Col>\r\n                <Row>\r\n                    <Col>\r\n                        <CountdownCircleTimer\r\n                            isPlaying\r\n                            durationSeconds={parseInt(timer)}\r\n                            colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                            renderTime={CircleTimer}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Col> \r\n            : null\r\n            }\r\n            \r\n        </Row>\r\n    </Container>\r\n    \r\n}\r\n\r\nexport default StartScreen","import React from 'react'\r\n\r\nconst Question = ({ question }) => {\r\n    return <h1 className=\"text-center\">{ question }</h1>\r\n}\r\n\r\nexport default Question","import React, { useState } from 'react'\r\nimport { Col } from 'react-bootstrap'\r\nimport '../../style.css'\r\n\r\nconst Choice = ({ setAnswer, choice, value }) => {\r\n    const id = `choice-${value}`\r\n\r\n    return <Col className=\"radioButton\">\r\n        <input \r\n            onChange={() => setAnswer({value: value, name: choice})} \r\n            id={id} \r\n            type=\"radio\" \r\n            name=\"choices\" \r\n            value={value} \r\n        />\r\n        <label htmlFor={id}>{ choice }</label>\r\n    </Col>\r\n}\r\n\r\nexport default Choice","import React from 'react'\r\nimport { Row } from 'react-bootstrap'\r\nimport Choice from './Choice'\r\nimport '../../style.css'\r\n\r\nconst Choices = ({setAnswer, choices, disabled }) => {\r\n    return <Row className={disabled ? 'rowDisabled' : ''}>\r\n        { \r\n            choices.map((choice, i) => \r\n                <Choice disabled={disabled} setAnswer={setAnswer} choice={choice} key={i} value={i} />\r\n            )\r\n        }\r\n    </Row>\r\n}\r\n\r\nexport default Choices","import React, { useState, useEffect } from 'react'\r\nimport { Container, Row, Col, Button, ProgressBar} from 'react-bootstrap'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport CircleTimer from './UI/CircleTimer'\r\nimport Question from './UI/Question'\r\nimport Choices from './UI/Choices'\r\n  \r\nconst QuestionScreen = ({ setAnswer, timer, question, players, setReady }) => {\r\n    const [playersReady, setPlayersReady] = useState(0)\r\n    const [disabled, setDisabled] = useState(false)\r\n    document.title = question.title.toString()\r\n\r\n    function clickReady() {\r\n        setReady()\r\n        setDisabled(true)\r\n    } \r\n    useEffect(() => {\r\n        let num = players.filter(p => p.ready === true).length\r\n        setPlayersReady(num)\r\n    }, [players])\r\n    return <Container>\r\n        <Row>\r\n            <Col>\r\n                <CountdownCircleTimer\r\n                    isPlaying\r\n                    durationSeconds={parseInt(timer)}\r\n                    colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                    renderTime={CircleTimer}\r\n                />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Question question={question.title} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Choices disabled={disabled} setAnswer={setAnswer} choices={question.choices} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Button variant=\"success\" size=\"lg\" onClick={() => clickReady()} block>Ready</Button>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <Row>\r\n                    <Col>\r\n                        <h4 className=\"text-center\">{`${playersReady} / ${players.length} have answered`}</h4>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ProgressBar animated now={parseInt(playersReady)} max={parseInt(players.length)} min={0}/>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default QuestionScreen","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../../style.css'\r\n\r\nconst RoundStatsTable = ({ gamertag, answers, correctAnswer }) => {\r\n    let rows = \"\"\r\n    if(answers){\r\n        rows = Object.keys(answers).map((p, i) => {\r\n            return <tr key={i} className={answers[p].value === correctAnswer.value ? 'correct' : 'wrong'}>\r\n                <td>{i + 1}</td>\r\n                <td>{gamertag === p ? <b>{p}</b> : p}</td>\r\n                <td>{answers[p].name}</td>\r\n            </tr>\r\n        })\r\n    }\r\n\r\n    return <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Gamertag</th>\r\n                <th>Answered</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {rows}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nexport default RoundStatsTable","import React from 'react'\r\nimport { Container, Row, Col, Badge } from 'react-bootstrap'\r\nimport CircleTimer from './UI/CircleTimer'\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\nimport RoundStatsTable from './UI/RoundStatsTable'\r\nimport PageTitle from './UI/PageTitle'\r\n\r\nconst RoundEndScreen = ({ correctAnswer, gamertag, answers, timer }) => {\r\n    document.title = 'Correct Answers'\r\n    return <Container>\r\n        <Row>\r\n            <Col>\r\n                <PageTitle title=\"Round Statistics\" />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col className=\"text-center\">\r\n                {correctAnswer.value === answers[gamertag].value \r\n                ? <p>Your answer was <span className=\"green\">correct</span></p>\r\n                : <p>Your answer <span className=\"bold\">{answers[gamertag].name}</span> was <span className=\"red\">incorrect</span></p>\r\n                }\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <h3 className=\"text-center\">{correctAnswer.answerTitle} <Badge variant=\"success\">{correctAnswer.name}</Badge></h3> \r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <RoundStatsTable correctAnswer={correctAnswer} gamertag={gamertag} answers={answers} />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n            <Row>\r\n                <CountdownCircleTimer\r\n                    isPlaying\r\n                    durationSeconds={parseInt(timer)}\r\n                    colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\r\n                    renderTime={CircleTimer}\r\n                />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default RoundEndScreen","import React from 'react'\r\nimport { Table } from 'react-bootstrap'\r\nimport { Trophy } from 'react-bootstrap-icons'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../../style.css'\r\n\r\nconst StatsTable = ({ players, gamertag }) => {\r\n    //Sort by points and map to table\r\n    let rows = \"\"\r\n    if(players){\r\n        rows = (players)\r\n        .sort((a, b) => b.points - a.points)\r\n        .map((player, i) => <tr key={i}>\r\n            <td>{ i + 1}</td>\r\n            <td>{ gamertag === player.gamertag ? <b>{player.gamertag}</b> : player.gamertag }</td>\r\n            <td>{ player.points } {i === 0 ? <Trophy color='#00cc66' size={30}/> : \"you suck\"}</td>\r\n        </tr>\r\n        )\r\n    }\r\n  \r\n\r\n    return <Table striped bordered hover size=\"sm\">\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>User</th>\r\n                <th>Points</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {rows}\r\n        </tbody>\r\n    </Table>\r\n}\r\n\r\nexport default StatsTable","import React from 'react'\r\nimport { Container, Row, Col, Button, ButtonGroup } from 'react-bootstrap'\r\nimport { Trophy } from 'react-bootstrap-icons'\r\nimport PageTitle from './UI/PageTitle'\r\nimport StatsTable from './UI/StatsTable'\r\n\r\nconst GameEndScreen = ({ gamertag, players }) => {\r\n    let winner = players.reduce((prev, current) => (prev.points > current.points) ? prev : current)\r\n    document.title = gamertag === winner.gamertag ? 'Congratulations!' : 'Better Luck Next Time!'\r\n    return <Container>\r\n        <Row>\r\n            <Col>\r\n                <PageTitle title=\"End Stats\" />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col>\r\n                <StatsTable gamertag={gamertag} players={players}/>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col className=\"text-center\">\r\n                <ButtonGroup className=\"buttons\" size=\"lg\">\r\n                    <Button href=\"/\" variant=\"outline-dark\">Return to FrontPage</Button>\r\n                    <Button variant=\"success\">Play Again</Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default GameEndScreen","import React from 'react'\r\n\r\nconst PageHeader = ({ title }) => {\r\n    return <header className=\"text-center\">\r\n         <small>{ title }</small>\r\n    </header>\r\n}\r\n\r\nexport default PageHeader","import React, { useState, useEffect} from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport WelcomeScreen from './components/WelcomeScreen' \r\nimport StartScreen from './components/StartScreen'\r\nimport QuestionScreen from './components/QuestionScreen'\r\nimport RoundEndScreen from './components/RoundEndScreen'\r\nimport GameEndScreen from './components/GameEndScreen'\r\nimport LoginScreen from './components/LoginScreen'\r\nimport PageHeader from './components/UI/PageHeader' \r\nimport io from 'socket.io-client'\r\nimport './App.css'\r\nimport './style.css'\r\n\r\nconst socket = io('https://wikivisa.herokuapp.com')\r\n//const socket = io('localhost:3001')\r\n\r\nfunction App() {\r\n    const [pageTitle, setPageTitle] = useState(\"\")\r\n    const [game, setGame] = useState({})\r\n    const [publicGames, setPublicGames] = useState([])\r\n    const [gamertag, setGamertag] = useState(\"\")\r\n    const [roomCode, setRoomCode] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n    const [correctAnswer, setCorrectAnswer] = useState({})\r\n    const [joiningState, setJoiningState] = useState(false)\r\n    const [creatingState, setCreatingState] = useState(false)\r\n\r\n    window.onresize = () => centerizeWrapper()\r\n    window.onload = () => centerizeWrapper()\r\n\r\n    useEffect(() => {\r\n        socket.on(\"send players\", players => {\r\n            setGame(prevState => ({...prevState, players: players}))\r\n        })\r\n        socket.on(\"send game\", game => {\r\n            setGame(game)\r\n        })\r\n        socket.on(\"send timer\", timer => {\r\n            let timerName = Object.keys(timer)[0];\r\n            setGame(prevState => ({...prevState, [timerName]: timer[timerName]}))\r\n        })\r\n        socket.on(\"update game view\", view => {\r\n            setGame(prevState => ({...prevState, view: view}))\r\n        })\r\n        socket.on(\"send gamertag\", data => {\r\n            setGamertag(data)\r\n        })\r\n        socket.on('reset timers', data => {\r\n            setGame(prevState => ({...prevState, questionCounter: data.questionCounter, roundEndCounter: data.roundEndCounter}))\r\n        })\r\n        socket.on(\"get correct answer\", data => {\r\n            setCorrectAnswer(data)\r\n        })\r\n        socket.on(\"gamertag taken\", data => {\r\n            setGamertag(data)\r\n            setJoiningState(false)\r\n            window.alert(`Gamertag '${data} is already taken!'`)\r\n        })\r\n        socket.on(\"error while joining\", error => {\r\n            setJoiningState(false)\r\n            window.alert(error)\r\n        })\r\n        socket.on(\"send question\", question => {\r\n            setGame(prevState => ({...prevState, question: question}))\r\n        })\r\n        socket.on(\"game started\", () => {\r\n            setGame(prevState => ({...prevState, started: true}))\r\n        })\r\n        socket.on(\"send public games\", games => {\r\n           /* games.forEach(game => {\r\n                game.join = () => joinGame(game.roomCode)\r\n            })*/\r\n            setPublicGames(games)\r\n        })\r\n    }, [])\r\n\r\n    function centerizeWrapper() {\r\n        let wrapper = document.getElementById(\"wrapper\"),\r\n            root = document.getElementById(\"root\"),\r\n            wrapperWidth = wrapper.offsetWidth, \r\n            wrapperHeight = wrapper.offsetHeight,\r\n            viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\r\n            viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0),\r\n            wrapperCenter = \"centerizedWrapper\";\r\n\r\n        if(wrapperWidth > viewportWidth || wrapperHeight > viewportHeight) {\r\n            root.classList.remove(wrapperCenter)\r\n        } else {\r\n            root.classList.add(wrapperCenter)\r\n        }\r\n    }\r\n\r\n    function getPublicGames() {\r\n        socket.emit('get public games')\r\n    }\r\n    \r\n    function getQuestionByQuestionId(question_id) {\r\n        let question = false\r\n        game.questions.forEach(q => {\r\n            if(q.question_id === question_id) {\r\n                question = q\r\n            }\r\n        }) \r\n        return question\r\n    }\r\n\r\n    function getPlayersAnswers() {\r\n        let answers = {}\r\n        game.players.forEach(p => {\r\n            let answeredThisRound = false\r\n            p.answers.forEach(a => {\r\n                if(a.question_id === game.question.id) {\r\n                    answers[p.gamertag] = a.answer\r\n                    answeredThisRound = true\r\n                }\r\n            })\r\n            if(!answeredThisRound){\r\n                answers[p.gamertag] = {name: \"No answer for this round\"}\r\n            }\r\n        })\r\n        return answers\r\n    }\r\n\r\n    function joinGame(roomCode) {\r\n        setJoiningState(true)\r\n        socket.emit(\"join game\", { gamertag, roomCode })\r\n    }\r\n\r\n    function createGame(gameProperties) {\r\n        setCreatingState(true)\r\n        socket.emit('create game', { gamertag, roomCode, gameProperties })\r\n    }\r\n\r\n    function setAnswerAndPlayerReady() {\r\n        socket.emit(\"set ready\", { game_id: game.id, gamertag, answer, question_id: game.question.id }) \r\n    }\r\n\r\n    function startGame() {\r\n        socket.emit(\"start game\", { game_id: game.id })\r\n    }\r\n\r\n    function getPage() {\r\n        switch(game.view) {\r\n            case 1: return <StartScreen \r\n                players={game.players} \r\n                gamertag={gamertag} \r\n                timer={game.startGameCounter}\r\n                roomCode={game.roomCode} \r\n                startGame={startGame}\r\n                started={game.started}\r\n                isCreator={game.creator}\r\n            />\r\n            case 2: return <QuestionScreen \r\n                players={game.players} \r\n                gamertag={gamertag} \r\n                timer={game.questionCounter} \r\n                question={game.question}\r\n                setAnswer={setAnswer} \r\n                setReady={setAnswerAndPlayerReady}\r\n            />\r\n            case 3: return <RoundEndScreen \r\n                answers={getPlayersAnswers()} \r\n                gamertag={gamertag} \r\n                timer={game.roundEndCounter} \r\n                correctAnswer={correctAnswer} \r\n            />\r\n            case 4: return <GameEndScreen \r\n                players={game.players} \r\n                gamertag={gamertag} \r\n            />\r\n            default: return <WelcomeScreen\r\n                setRoomCode={setRoomCode}\r\n                setGamertag={setGamertag}\r\n                gamertag={gamertag}\r\n                roomCode={roomCode}\r\n                joiningState={joiningState}\r\n                joinGame={joinGame}\r\n                createGame={createGame}\r\n                creatingState={creatingState}\r\n                getPublicGames={getPublicGames}\r\n                publicGames={publicGames}\r\n            />\r\n        }\r\n    }\r\n\r\n    return <Container id=\"wrapper\" fluid>\r\n        <PageHeader title={pageTitle} />\r\n        { getPage() }\r\n    </Container>\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}