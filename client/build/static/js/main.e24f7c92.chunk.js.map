{"version":3,"sources":["components/UI/PageTitle.js","components/views/WelcomePage/Gamertag.js","components/views/WelcomePage/JoinOrCreate.js","components/UI/GameListItem.js","components/UI/GameList.js","components/modals/FindGameModal.js","components/views/WelcomePage/JoinGame.js","components/views/WelcomePage/CreateGame.js","components/WelcomeScreen.js","components/UI/CircleTimer.js","components/UI/Player.js","components/StartScreen.js","components/UI/Question.js","components/UI/Choice.js","components/UI/Choices.js","components/QuestionScreen.js","components/UI/RoundStatsTable.js","components/RoundEndScreen.js","components/UI/StatsTable.js","components/GameEndScreen.js","components/UI/PageHeader.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","title","className","GamertagScreen","setScreen","setGamertag","gamertag","document","Row","Col","Form","Control","size","onChange","e","target","value","placeholder","Button","block","disabled","length","variant","onClick","JoinOrCreateScreen","GameListItem","game","ListGroup","Item","sm","Badge","pill","currentPlayers","maxPlayers","name","categories","join","GameList","getPublicGames","publicGames","useEffect","map","i","key","FindGameModal","setModalVisibility","visibility","Modal","show","centered","Header","Title","Body","Footer","JoinGameScreen","setRoomCode","roomCode","joiningState","joinGame","useState","modalVisibility","Group","Label","xs","span","order","type","md","lg","ButtonGroup","style","width","CreateGameScreen","creatingState","createGame","question","count","counters","answer","roundEnd","losePoints","gameProperties","setGameProperties","Text","controlId","event","options","selected","push","prevState","addToSelectedCategories","as","multiple","Check","id","label","checked","WelcomeScreen","screen","Container","JoinOrCreate","JoinGame","CreateGame","getScreen","CircleTimer","startGameCounter","Player","thisPlayersTag","StartScreen","players","timer","startGame","started","isCreator","allPlayers","player","isPlaying","durationSeconds","parseInt","colors","renderTime","Question","Choice","setAnswer","choice","htmlFor","Choices","choices","QuestionScreen","setReady","playersReady","setPlayersReady","toString","num","filter","p","ready","ProgressBar","animated","now","max","min","RoundStatsTable","answers","correctAnswer","rows","Object","keys","Table","striped","bordered","hover","RoundEndScreen","answerTitle","StatsTable","sort","a","b","points","color","GameEndScreen","winner","reduce","prev","current","href","PageHeader","socket","io","App","pageTitle","setGame","setPublicGames","setCorrectAnswer","setJoiningState","setCreatingState","centerizeWrapper","wrapper","getElementById","root","wrapperWidth","offsetWidth","wrapperHeight","offsetHeight","viewportWidth","Math","documentElement","clientWidth","window","innerWidth","viewportHeight","clientHeight","innerHeight","classList","remove","add","emit","getPlayersAnswers","forEach","answeredThisRound","question_id","game_id","onresize","onload","on","timerName","view","data","questionCounter","roundEndCounter","alert","error","games","fluid","creator","getPage","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.e24f7c92.chunk.js","sourcesContent":["import React from 'react'\n\nconst PageTitle = ({ title }) => {\n    return <h1 className=\"text-center\">{ title }</h1>\n}\n\nexport default PageTitle","import React from 'react'\nimport { Row, Col, Button, Form } from 'react-bootstrap'\nimport PageTitle from '../../UI/PageTitle'\n\nconst GamertagScreen = ({ setScreen, setGamertag, gamertag }) => {\n    document.title = 'Welcome!'\n    return <Row>\n        <Col>\n            <Form>\n                <Row className=\"text-center\">\n                    <Col>\n                        <PageTitle title=\"Give Gamertag\" />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Control size=\"lg\" className=\"text-center\" onChange={e => setGamertag(e.target.value)} placeholder=\"Provide gamertag\" />\n                    </Col>\n                </Row>\n                <Row className=\"text-center\">\n                    <Col>\n                        <Button block disabled={!gamertag.length} variant=\"success\" onClick={() => setScreen('JoinOrCreate')}>Next</Button>\n                    </Col>\n                </Row>\n                <Row className=\"text-center\">\n                    <Col>\n                        <Button block variant=\"link\" onClick={() => setScreen('JoinOrCreate')}>Randomize name</Button>\n                    </Col>\n                </Row>\n            </Form>\n        </Col>\n    </Row>\n}\n\nexport default GamertagScreen","import React from 'react'\nimport { Col, Row, Button } from 'react-bootstrap'\nimport PageTitle from '../../UI/PageTitle'\nimport { Play, Tools } from 'react-bootstrap-icons'\n\nconst JoinOrCreateScreen = ({ setScreen }) => {\n    document.title = 'Format Game'\n    return <Row>\n        <Col>\n            <Row className=\"text-center\">\n                <Col>\n                    <PageTitle title=\"Join or Create a game\" />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button size=\"lg\" block variant=\"primary\" onClick={() => setScreen('JoinGame')}>\n                        <Play size={20} /> Join Game\n                    </Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button size=\"lg\" block variant=\"success\" onClick={() => setScreen('CreateGame')}>\n                        <Tools size={20} /> Create Game\n                    </Button>\n                </Col>\n            </Row>\n        </Col>\n    </Row>\n}\n\nexport default JoinOrCreateScreen","import React from 'react'\nimport { Row, Col, Button, ListGroup, Badge } from 'react-bootstrap'\n\nconst GameListItem = ({ game }) => {\n    return <ListGroup.Item>\n        <Row>\n            <Col sm=\"auto\">\n                <Badge pill variant=\"primary\">\n                    { game.currentPlayers }/{ game.maxPlayers }\n                </Badge>\n            </Col>\n            <Col>{ game.name }</Col>\n            <Col>{ game.categories[0] }</Col>\n            <Col sm=\"auto\">\n                <Button size=\"sm\" variant=\"success\" onClick={() => game.join()}>Join</Button>\n            </Col>\n        </Row>\n    </ListGroup.Item>\n}\n\nexport default GameListItem","import React, { useEffect } from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport GameListItem from './GameListItem'\n\nconst GameList = ({getPublicGames, publicGames}) => {\n    useEffect(() => {\n        getPublicGames()\n    }, [])\n\n    return <ListGroup>\n        { \n            publicGames.map((game, i) => \n                <GameListItem key={i} game={game} />\n            )\n        }\n    </ListGroup>\n}\n\nexport default GameList","import React from 'react'\nimport GameList from '../UI/GameList'\nimport { Modal, Button } from 'react-bootstrap'\nimport { ArrowClockwise } from 'react-bootstrap-icons'\n\nconst FindGameModal = ({setModalVisibility, visibility, getPublicGames, publicGames}) => {\n    return <Modal className=\"findGameModal\" show={visibility} size=\"md\" centered>\n        <Modal.Header>\n            <Modal.Title>\n                Find Game\n            </Modal.Title>\n            <Button size=\"sm\" className=\"findGameModalRefreshBtn\" onClick={() => getPublicGames()} variant=\"light\">\n                <ArrowClockwise size=\"18\" /> Refresh List \n            </Button>\n        </Modal.Header>\n        <Modal.Body>\n            <GameList getPublicGames={getPublicGames} publicGames={publicGames} />\n        </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={() => setModalVisibility(false)}>Close</Button>\n        </Modal.Footer>\n    </Modal>\n}\n\nexport default FindGameModal","import React, {useState} from 'react'\nimport FindGameModal from '../../modals/FindGameModal'\nimport { Col, Row, Button, Form, ButtonGroup  } from 'react-bootstrap'\nimport PageTitle from '../../UI/PageTitle'\nimport { PlayFill, ArrowLeft, Search } from 'react-bootstrap-icons'\n\nconst JoinGameScreen = ({ setScreen, setRoomCode, roomCode, joiningState, joinGame, getPublicGames, publicGames }) => {\n    const [modalVisibility, setModalVisibility] = useState(false)\n    \n    return <Row>\n        <FindGameModal setModalVisibility={setModalVisibility} visibility={modalVisibility} getPublicGames={getPublicGames} publicGames={publicGames} />\n        <Col>\n            <Row className=\"text-center\">\n                <Col>\n                    <PageTitle title=\"Enter Room Code or Find Game\" />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form.Group>\n                        <Form.Label>Enter room code</Form.Label>\n                        <Form.Control disabled={joiningState} size=\"lg\" placeholder=\"Provide room code\" onChange={e => setRoomCode(e.target.value)}/>\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={{ span: 12, order: 2 }} sm={{ span: \"auto\", order: 1 }}>\n                    <Button onClick={() => setScreen('JoinOrCreate')} type=\"button\">\n                        <ArrowLeft size={20} /> Return\n                    </Button>\n                </Col>\n                <Col xs={{ span: 12, order: 1 }} sm={{ order: 2 }} md lg>\n                    <ButtonGroup style={{width: \"100%\"}}>\n                        <Button variant=\"secondary\" onClick={() => setModalVisibility(true)} type=\"button\">\n                            <Search size={20} /> Find Game\n                        </Button>\n                        <Button disabled={!roomCode.length} onClick={() => joinGame(roomCode)} type=\"button\">\n                            <PlayFill size={20} /> Join Room\n                        </Button>\n                    </ButtonGroup>\n                </Col>\n            </Row>\n        </Col>\n    </Row>\n}\n\nexport default JoinGameScreen","import React, {useState} from 'react'\nimport { Col, Row, Button, Form } from 'react-bootstrap'\nimport PageTitle from '../../UI/PageTitle'\nimport { ArrowLeft, ArrowClockwise, Check } from 'react-bootstrap-icons/'\n\n\nconst CreateGameScreen = ({setScreen, setRoomCode, creatingState, createGame}) => {\n    const [gameProperties, setGameProperties] = useState({\n        question: {\n            categories: [],\n            count: \"\"\n        },\n        counters: {\n            answer: \"\",\n            roundEnd: \"\"\n        },\n        visibility: false,\n        losePoints: false\n    })\n\n    const addToSelectedCategories = event => {\n        let options = event.target.options,\n            selected = []\n        for(let i = 0; i < options.length; i++) {\n            if(options[i].selected) {\n                selected.push(options[i].value)\n            }\n        }\n        setGameProperties(prevState => ({...prevState, question: {...prevState.question, categories: selected}}))\n    }\n\n    return <Row>\n        <Col>\n            <Form>\n                <Row className=\"text-center\">\n                    <Col>\n                        <PageTitle title=\"Setup your personal game\" />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Group>\n                            <Form.Label>Enter room code</Form.Label>\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Enter room code\" onChange={e => setRoomCode(e.target.value)}/>\n                            <Form.Text className=\"text-muted\">\n                                You can specify a room code or leave it empty to let us generate it for you\n                            </Form.Text>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"12\" md=\"6\">\n                        <Form.Group>\n                            <Form.Label>Question categories</Form.Label>\n                            <Form.Group controlId=\"createGameForm.categorySelect\" onChange={e => addToSelectedCategories(e)}>\n                                <Form.Control disabled={creatingState} as=\"select\" multiple>\n                                    <option value=\"capital\">Capital</option>\n                                    <option value=\"officialLanguage\">Country Language</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Text className=\"text-muted\">\n                                Select question categories for your game. Hold Ctrl if you want to select multiple categories!\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Question count</Form.Label>\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 5 questions\" onChange={e => setGameProperties({...gameProperties, question: {...gameProperties.question, count: e.target.value }})} />\n                            <Form.Text className=\"text-muted\">\n                                How many questions do you want answer?\n                            </Form.Text>\n                        </Form.Group>\n                    </Col>\n                    <Col xs=\"12\" md=\"6\">\n                        <Form.Group>\n                            <Form.Label>Answer time</Form.Label>\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 10 seconds\" onChange={e => setGameProperties({...gameProperties, counters: {...gameProperties.counters, answer: e.target.value }})} />\n                            <Form.Text className=\"text-muted\">\n                                This is the answering time for each question\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Round end timer</Form.Label>\n                            <Form.Control disabled={creatingState} size=\"lg\" placeholder=\"Default: 10 seconds\" onChange={e => setGameProperties({...gameProperties, counters: {...gameProperties.counters, roundEnd: e.target.value }})} />\n                            <Form.Text className=\"text-muted\">\n                                This is the timer for downtime between each question showing correct answers\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Lose Points On Incorrect Answer</Form.Label>\n                            <Form.Check \n                                type=\"switch\"\n                                id=\"losePoints-switch\"\n                                label={'Player will ' + (gameProperties.losePoints ? '' : 'not') + ' lose points'}\n                                checked={gameProperties.losePoints}\n                                onChange={e => setGameProperties({...gameProperties, losePoints: !gameProperties.losePoints})}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Visibility</Form.Label>\n                            <Form.Check \n                                type=\"switch\"\n                                id=\"visibility-switch\"\n                                label={'Game will be ' + (gameProperties.visibility ? 'public' : 'private')}\n                                checked={gameProperties.visibility}\n                                onChange={e => setGameProperties({...gameProperties, visibility: !gameProperties.visibility})}\n                            />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"auto\">\n                        <Button onClick={() => setScreen('JoinOrCreate')} type=\"button\">\n                            <ArrowLeft size={20} /> Return\n                        </Button>\n                    </Col>\n                    <Col className=\"text-right\">\n                        <Button variant={creatingState ? \"secondary\" : \"success\"} onClick={() => createGame(gameProperties)} type=\"button\">\n                            { creatingState ? <ArrowClockwise size={20} className=\"spin\" /> : <Check size={20} /> }\n                            { creatingState ? \" Creating game...\" : \" Create & Join\" }\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        </Col>\n    </Row>\n}\n\nexport default CreateGameScreen","import React, { useState } from 'react'\nimport GametagScreen from './views/WelcomePage/Gamertag'\nimport JoinOrCreateScreen from './views/WelcomePage/JoinOrCreate'\nimport JoinGameScreen from './views/WelcomePage/JoinGame'\nimport CreateGameScreen from './views/WelcomePage/CreateGame'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nconst WelcomeScreen = ({ setGamertag, gamertag, setRoomCode, roomCode, joiningState, joinGame, createGame, creatingState, getPublicGames, publicGames }) => {\n    const [screen, setScreen] = useState(\"\")\n\n    const getScreen = () => {\n        switch(screen){\n            case 'JoinOrCreate': return <JoinOrCreateScreen \n                setScreen={setScreen} \n            /> \n            case 'JoinGame': return <JoinGameScreen \n                setScreen={setScreen}\n                setRoomCode={setRoomCode} \n                roomCode={roomCode} \n                joiningState={joiningState} \n                joinGame={joinGame}\n                getPublicGames={getPublicGames}\n                publicGames={publicGames}\n            />\n            case 'CreateGame': return <CreateGameScreen \n                setScreen={setScreen}\n                setRoomCode={setRoomCode} \n                creatingState={creatingState} \n                createGame={createGame} \n            />\n            default: return <GametagScreen \n                setScreen={setScreen}\n                setGamertag={setGamertag} \n                gamertag={gamertag}\n            />\n        }\n    }\n\n    return <Container>\n        <Row className=\"justify-content-md-center\">\n            <Col lg=\"8\">\n                { getScreen() }\n            </Col>\n        </Row>\n    </Container>\n}\n\nexport default WelcomeScreen","import React from 'react'\nimport '../../style.css'\n\nconst CircleTimer = (startGameCounter) => {\n    if (startGameCounter === 0) {\n      return <div className=\"timer\">Too late...</div>\n    }\n  \n    return (\n      <div className=\"timer\">\n        <div className=\"text\">Remaining</div>\n        <div className=\"value\">{startGameCounter}</div>\n        <div className=\"text\">seconds</div>\n      </div>\n    )\n  } \n\nexport default CircleTimer","import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport '../../style.css'\n\nconst Player = ({ gamertag, thisPlayersTag }) => {\n    return <Row>\n        <Col>\n            <div className=\"gamerTag\">\n                {\n                    thisPlayersTag ? <b>{gamertag}</b> : gamertag\n                }\n            </div>\n        </Col>\n    </Row>\n}\n\nexport default Player","import React from 'react'\nimport { Container, Row, Col, Button } from 'react-bootstrap'\nimport CircleTimer from './UI/CircleTimer'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport PageTitle from './UI/PageTitle'\nimport Player from './UI/Player'\n\nconst StartScreen = ({ gamertag, players, timer, roomCode, startGame, started, isCreator }) => {\n    let allPlayers = \"\" \n    document.title = started ? 'Game Is Starting!' : 'Game Lobby'\n    if(players.length) {\n        allPlayers = players.map(player => {\n            return <Player key={player.id} gamertag={player.gamertag} thisPlayersTag={gamertag === player.gamertag}/>  \n        })\n    }\n    return <Container>   \n        <Row>\n            <Col>\n                <PageTitle title={`Room ${roomCode}`}/>\n            </Col>\n        </Row>\n        { isCreator && !started\n            ? <Row>\n                <Col>\n                    <Button variant=\"success\" onClick={() => { startGame() }}>\n                        Start game\n                    </Button>\n                </Col>\n            </Row>\n            : null\n        }\n        <Row>\n            <Col>\n                <Row>\n                    <Col>\n                        <h4>Players in the game room</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        { allPlayers }\n                    </Col>\n                </Row>\n            </Col>\n            {started\n            ? <Col>\n                <Row>\n                    <Col>\n                        <CountdownCircleTimer\n                            isPlaying\n                            durationSeconds={parseInt(timer)}\n                            colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n                            renderTime={CircleTimer}\n                        />\n                    </Col>\n                </Row>\n            </Col> \n            : null\n            }\n            \n        </Row>\n    </Container>\n    \n}\n\nexport default StartScreen","import React from 'react'\n\nconst Question = ({ question }) => {\n    return <h1 className=\"text-center\">{ question }</h1>\n}\n\nexport default Question","import React from 'react'\nimport { Col } from 'react-bootstrap'\nimport '../../style.css'\n\nconst Choice = ({ setAnswer, choice, value }) => {\n    const id = `choice-${value}`\n    return <Col className=\"radioButton\">\n        <input \n            onChange={() => setAnswer({name: choice, value: value})} \n            id={id} \n            type=\"radio\" \n            name=\"choices\" \n            value={value} \n        />\n        <label htmlFor={id}>{ choice }</label>\n    </Col>\n}\n\nexport default Choice","import React from 'react'\nimport { Row } from 'react-bootstrap'\nimport Choice from './Choice'\nimport '../../style.css'\n\nconst Choices = ({ setAnswer, choices }) => {\n    return <Row>\n        { \n            choices.map((choice, i) => \n                <Choice setAnswer={setAnswer} choice={choice} key={i} value={i} />\n            )\n        }\n    </Row>\n}\n\nexport default Choices","import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col, Button, ProgressBar} from 'react-bootstrap'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport CircleTimer from './UI/CircleTimer'\nimport Question from './UI/Question'\nimport Choices from './UI/Choices'\n  \nconst QuestionScreen = ({ setAnswer, timer, question, players, setReady }) => {\n    const [playersReady, setPlayersReady] = useState(0)\n    document.title = question.title.toString()\n    useEffect(() => {\n        let num = players.filter(p => p.ready === true).length\n        setPlayersReady(num)\n    }, [players])\n\n    return <Container>\n        <Row>\n            <Col>\n                <CountdownCircleTimer\n                    isPlaying\n                    durationSeconds={parseInt(timer)}\n                    colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n                    renderTime={CircleTimer}\n                />\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Question question={question.title} />\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Choices setAnswer={setAnswer} choices={question.choices} />\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Button variant=\"success\" size=\"lg\" onClick={() => setReady()} block>Ready</Button>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <Row>\n                    <Col>\n                        <h4 className=\"text-center\">{`${playersReady} / ${players.length} have answered`}</h4>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <ProgressBar animated now={parseInt(playersReady)} max={parseInt(players.length)} min={0}/>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    </Container>\n}\n\nexport default QuestionScreen","import React from 'react'\nimport { Table } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../../style.css'\n\nconst RoundStatsTable = ({ gamertag, answers, correctAnswer }) => {\n    let rows = \"\"\n    if(answers){\n        rows = Object.keys(answers).map((p, i) => {\n            return <tr key={i} className={answers[p].value === correctAnswer.value ? 'correct' : 'wrong'}>\n                <td>{i + 1}</td>\n                <td>{gamertag === p ? <b>{p}</b> : p}</td>\n                <td>{answers[p].name}</td>\n            </tr>\n        })\n    }\n\n    return <Table striped bordered hover size=\"sm\">\n        <thead>\n            <tr>\n                <th>#</th>\n                <th>Gamertag</th>\n                <th>Answered</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n    </Table>\n}\n\nexport default RoundStatsTable","import React from 'react'\nimport { Container, Row, Col, Badge } from 'react-bootstrap'\nimport CircleTimer from './UI/CircleTimer'\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport RoundStatsTable from './UI/RoundStatsTable'\nimport PageTitle from './UI/PageTitle'\n\nconst RoundEndScreen = ({ correctAnswer, gamertag, answers, timer }) => {\n    document.title = 'Correct Answers'\n    return <Container>\n        <Row>\n            <Col>\n                <PageTitle title=\"Round Statistics\" />\n            </Col>\n        </Row>\n        <Row>\n            <Col className=\"text-center\">\n                {correctAnswer.value === answers[gamertag].value \n                ? <p>Your answer was <text className=\"green\">correct</text></p>\n                : <p>Your answer <text className=\"bold\">{answers[gamertag].name}</text> was <text className=\"red\">incorrect</text></p>\n                }\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <h3 className=\"text-center\">{correctAnswer.answerTitle} <Badge variant=\"success\">{correctAnswer.name}</Badge></h3> \n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <RoundStatsTable correctAnswer={correctAnswer} gamertag={gamertag} answers={answers} />\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n            <Row>\n                <CountdownCircleTimer\n                    isPlaying\n                    durationSeconds={parseInt(timer)}\n                    colors={[[\"#004777\", 0.33], [\"#F7B801\", 0.33], [\"#A30000\"]]}\n                    renderTime={CircleTimer}\n                />\n                </Row>\n            </Col>\n        </Row>\n    </Container>\n}\n\nexport default RoundEndScreen","import React from 'react'\nimport { Table } from 'react-bootstrap'\nimport { Trophy } from 'react-bootstrap-icons'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../../style.css'\n\nconst StatsTable = ({ players, gamertag }) => {\n    //Sort by points and map to table\n    let rows = \"\"\n    if(players){\n        rows = (players)\n        .sort((a, b) => b.points - a.points)\n        .map((player, i) => <tr key={i}>\n            <td>{ i + 1}</td>\n            <td>{ gamertag === player.gamertag ? <b>{player.gamertag}</b> : player.gamertag }</td>\n            <td>{ player.points } {i === 0 ? <Trophy color='#00cc66' size={30}/> : \"you suck\"}</td>\n        </tr>\n        )\n    }\n  \n\n    return <Table striped bordered hover size=\"sm\">\n        <thead>\n            <tr>\n                <th>#</th>\n                <th>User</th>\n                <th>Points</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n    </Table>\n}\n\nexport default StatsTable","import React from 'react'\nimport { Container, Row, Col, Button, ButtonGroup } from 'react-bootstrap'\nimport { Trophy } from 'react-bootstrap-icons'\nimport PageTitle from './UI/PageTitle'\nimport StatsTable from './UI/StatsTable'\n\nconst GameEndScreen = ({ gamertag, players }) => {\n    let winner = players.reduce((prev, current) => (prev.points > current.points) ? prev : current)\n    document.title = gamertag === winner.gamertag ? 'Congratulations!' : 'Better Luck Next Time!'\n    return <Container>\n        <Row>\n            <Col>\n                <PageTitle title=\"End Stats\" />\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <StatsTable gamertag={gamertag} players={players}/>\n            </Col>\n        </Row>\n        <Row>\n            <Col className=\"text-center\">\n                <ButtonGroup className=\"buttons\" size=\"lg\">\n                    <Button href=\"/\" variant=\"outline-dark\">Return to FrontPage</Button>\n                    <Button variant=\"success\">Play Again</Button>\n                </ButtonGroup>\n            </Col>\n        </Row>\n    </Container>\n}\n\nexport default GameEndScreen","import React from 'react'\n\nconst PageHeader = ({ title }) => {\n    return <header className=\"text-center\">\n         <small>{ title }</small>\n    </header>\n}\n\nexport default PageHeader","import React, { useState, useEffect} from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport WelcomeScreen from './components/WelcomeScreen' \nimport StartScreen from './components/StartScreen'\nimport QuestionScreen from './components/QuestionScreen'\nimport RoundEndScreen from './components/RoundEndScreen'\nimport GameEndScreen from './components/GameEndScreen'\nimport LoginScreen from './components/LoginScreen'\nimport PageHeader from './components/UI/PageHeader' \nimport io from 'socket.io-client'\nimport './App.css'\nimport './style.css'\n\nconst socket = io('https://wikivisa-new.herokuapp.com')\n\nfunction App() {\n    const [pageTitle, setPageTitle] = useState(\"\")\n    const [game, setGame] = useState({})\n    const [publicGames, setPublicGames] = useState([])\n    const [gamertag, setGamertag] = useState(\"\")\n    const [roomCode, setRoomCode] = useState(\"\")\n    const [answer, setAnswer] = useState(\"\")\n    const [correctAnswer, setCorrectAnswer] = useState({})\n    const [joiningState, setJoiningState] = useState(false)\n    const [creatingState, setCreatingState] = useState(false)\n\n    window.onresize = () => centerizeWrapper()\n    window.onload = () => centerizeWrapper()\n\n    useEffect(() => {\n        socket.on(\"send players\", players => {\n            setGame(prevState => ({...prevState, players: players}))\n        })\n        socket.on(\"send game\", game => {\n            setGame(game)\n        })\n        socket.on(\"send timer\", timer => {\n            let timerName = Object.keys(timer)[0];\n            setGame(prevState => ({...prevState, [timerName]: timer[timerName]}))\n        })\n        socket.on(\"update game view\", view => {\n            setGame(prevState => ({...prevState, view: view}))\n        })\n        socket.on(\"send gamertag\", data => {\n            setGamertag(data)\n        })\n        socket.on('reset timers', data => {\n            setGame(prevState => ({...prevState, questionCounter: data.questionCounter, roundEndCounter: data.roundEndCounter}))\n        })\n        socket.on(\"get correct answer\", data => {\n            setCorrectAnswer(data)\n        })\n        socket.on(\"gamertag taken\", data => {\n            setGamertag(data)\n            setJoiningState(false)\n            window.alert(`Gamertag '${data} is already taken!'`)\n        })\n        socket.on(\"error while joining\", error => {\n            setJoiningState(false)\n            window.alert(error)\n        })\n        socket.on(\"send question\", question => {\n            setGame(prevState => ({...prevState, question: question}))\n        })\n        socket.on(\"game started\", () => {\n            setGame(prevState => ({...prevState, started: true}))\n        })\n        socket.on(\"send public games\", games => {\n            games.forEach(game => {\n                game.join = () => joinGame(game.roomCode)\n            })\n            setPublicGames(games)\n        })\n    }, [])\n\n    useEffect(() => {\n        if(typeof answer === 'object') {\n            submitAnswer()\n        }\n    }, [answer])\n\n    function centerizeWrapper() {\n        let wrapper = document.getElementById(\"wrapper\"),\n            root = document.getElementById(\"root\"),\n            wrapperWidth = wrapper.offsetWidth, \n            wrapperHeight = wrapper.offsetHeight,\n            viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n            viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0),\n            wrapperCenter = \"centerizedWrapper\";\n\n        if(wrapperWidth > viewportWidth || wrapperHeight > viewportHeight) {\n            root.classList.remove(wrapperCenter)\n        } else {\n            root.classList.add(wrapperCenter)\n        }\n    }\n\n    function getPublicGames() {\n        socket.emit('get public games')\n    }\n    \n    function getQuestionByQuestionId(question_id) {\n        let question = false\n        game.questions.forEach(q => {\n            if(q.question_id === question_id) {\n                question = q\n            }\n        }) \n        return question\n    }\n\n    function getPlayersAnswers() {\n        let answers = {}\n        game.players.forEach(p => {\n            let answeredThisRound = false\n            p.answers.forEach(a => {\n                if(a.question_id === game.question.id) {\n                    answers[p.gamertag] = a.answer\n                    answeredThisRound = true\n                }\n            })\n            if(!answeredThisRound){\n                answers[p.gamertag] = {name: \"No answer for this round\"}\n            }\n        })\n        return answers\n    }\n\n    function submitAnswer() {\n        socket.emit(\"submit answer\", {\n            question_id: game.question.id,\n            gamertag: gamertag,\n            answer: answer,\n            game_id: game.id\n        })\n    }\n\n    function joinGame(roomCode) {\n        setJoiningState(true)\n        socket.emit(\"join game\", { gamertag, roomCode })\n    }\n\n    function createGame(gameProperties) {\n        setCreatingState(true)\n        socket.emit('create game', { gamertag, roomCode, gameProperties })\n    }\n\n    function setReady() {\n        socket.emit(\"set ready\", { game_id: game.id, gamertag, roomCode: game.roomCode })\n    }\n\n    function startGame() {\n        socket.emit(\"start game\", { game_id: game.id })\n    }\n\n    function getPage() {\n        switch(game.view) {\n            case 1: return <StartScreen \n                players={game.players} \n                gamertag={gamertag} \n                timer={game.startGameCounter}\n                roomCode={game.roomCode} \n                startGame={startGame}\n                started={game.started}\n                isCreator={game.creator}\n            />\n            case 2: return <QuestionScreen \n                players={game.players} \n                gamertag={gamertag} \n                timer={game.questionCounter} \n                question={game.question}\n                setAnswer={setAnswer} \n                setReady={setReady}\n            />\n            case 3: return <RoundEndScreen \n                answers={getPlayersAnswers()} \n                gamertag={gamertag} \n                timer={game.roundEndCounter} \n                correctAnswer={correctAnswer} \n            />\n            case 4: return <GameEndScreen \n                players={game.players} \n                gamertag={gamertag} \n            />\n            default: return <WelcomeScreen\n                setRoomCode={setRoomCode}\n                setGamertag={setGamertag}\n                gamertag={gamertag}\n                roomCode={roomCode}\n                joiningState={joiningState}\n                joinGame={joinGame}\n                createGame={createGame}\n                creatingState={creatingState}\n                getPublicGames={getPublicGames}\n                publicGames={publicGames}\n            />\n        }\n    }\n\n    return <Container id=\"wrapper\" fluid>\n        <PageHeader title={pageTitle} />\n        { getPage() }\n    </Container>\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}